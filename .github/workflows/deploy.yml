name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  # --- ÉTAPE 1: Test du code ---
  test:
    runs-on: ubuntu-latest
    name: Run Linter & Tests

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          extensions: mbstring, intl, sqlite3, pdo_sqlite, fileinfo, dom
          tools: composer:v2
          coverage: none

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install Node Dependencies
        run: npm ci

      - name: Install PHP Dependencies
        run: composer install --no-interaction --prefer-dist --no-progress

      - name: Configure .env (SQLite)
        run: |
          cp .env.example .env
          php -r "file_put_contents('.env', preg_replace('/^APP_ENV=.*/m','APP_ENV=testing', file_get_contents('.env')));"
          php -r "file_put_contents('.env', preg_replace('/^DB_CONNECTION=.*/m','DB_CONNECTION=sqlite', file_get_contents('.env')));"
          php -r "file_put_contents('.env', preg_replace('/^DB_DATABASE=.*/m','DB_DATABASE=' . __DIR__ . '/database/database.sqlite', file_get_contents('.env')));"
          php -r "file_put_contents('.env', preg_replace('/^QUEUE_CONNECTION=.*/m','QUEUE_CONNECTION=sync', file_get_contents('.env')));"
          php -r "file_put_contents('.env', preg_replace('/^CACHE_DRIVER=.*/m','CACHE_DRIVER=array', file_get_contents('.env')));"
          php -r "file_put_contents('.env', preg_replace('/^SESSION_DRIVER=.*/m','SESSION_DRIVER=array', file_get_contents('.env')));"

      - name: Prepare SQLite and Migrate
        run: |
          mkdir -p database
          touch database/database.sqlite
          php artisan key:generate
          php artisan migrate --force

      - name: Build Assets
        run: npm run build
        continue-on-error: true # On n'arrête pas le test si le build échoue

      - name: Run Pest
        run: ./vendor/bin/pest -q

  # --- ÉTAPE 2: DÉPLOYER si tests son ok---
  deploy:
    runs-on: ubuntu-latest
    name: Deploy to Droplet
    needs: test  # <-- S'exécute seulement si le job "test" réussit

    # On déploie que si c'est un push sur main
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Deploy to Droplet
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DROPLET_HOST }}
        username: ${{ secrets.DROPLET_USERNAME }}
        key: ${{ secrets.DROPLET_SSH_KEY }}
        port: 22
        script: |
          echo "Connexion au serveur"
          cd /var/www/laravel

          echo "Mode maintenance ON"
          php artisan down

          git pull origin main

          # Important: --no-dev pour ne pas installer les libs de debug .
          composer install --no-dev --optimize-autoloader

          npm install

          npm run build

          php artisan migrate --force

          php artisan optimize:clear
          php artisan optimize

          echo "Redémarrage du worker Pusher..."
          sudo supervisorctl restart laravel-worker:*

          echo "Mode maintenance OFF"
          php artisan up

          echo "Déploiement terminé avec succès !"
